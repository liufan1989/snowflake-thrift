/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Snowflake_H
#define Snowflake_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "snowflake_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SnowflakeIf {
 public:
  virtual ~SnowflakeIf() {}
  virtual int64_t get_station_id() = 0;
  virtual int64_t get_process_id() = 0;
  virtual int64_t get_timestamp() = 0;
  virtual int64_t get_id(const std::string& useragent) = 0;
};

class SnowflakeIfFactory {
 public:
  typedef SnowflakeIf Handler;

  virtual ~SnowflakeIfFactory() {}

  virtual SnowflakeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SnowflakeIf* /* handler */) = 0;
};

class SnowflakeIfSingletonFactory : virtual public SnowflakeIfFactory {
 public:
  SnowflakeIfSingletonFactory(const boost::shared_ptr<SnowflakeIf>& iface) : iface_(iface) {}
  virtual ~SnowflakeIfSingletonFactory() {}

  virtual SnowflakeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SnowflakeIf* /* handler */) {}

 protected:
  boost::shared_ptr<SnowflakeIf> iface_;
};

class SnowflakeNull : virtual public SnowflakeIf {
 public:
  virtual ~SnowflakeNull() {}
  int64_t get_station_id() {
    int64_t _return = 0;
    return _return;
  }
  int64_t get_process_id() {
    int64_t _return = 0;
    return _return;
  }
  int64_t get_timestamp() {
    int64_t _return = 0;
    return _return;
  }
  int64_t get_id(const std::string& /* useragent */) {
    int64_t _return = 0;
    return _return;
  }
};


class Snowflake_get_station_id_args {
 public:

  Snowflake_get_station_id_args(const Snowflake_get_station_id_args&);
  Snowflake_get_station_id_args& operator=(const Snowflake_get_station_id_args&);
  Snowflake_get_station_id_args() {
  }

  virtual ~Snowflake_get_station_id_args() throw();

  bool operator == (const Snowflake_get_station_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Snowflake_get_station_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_station_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Snowflake_get_station_id_pargs {
 public:


  virtual ~Snowflake_get_station_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_station_id_result__isset {
  _Snowflake_get_station_id_result__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_station_id_result__isset;

class Snowflake_get_station_id_result {
 public:

  Snowflake_get_station_id_result(const Snowflake_get_station_id_result&);
  Snowflake_get_station_id_result& operator=(const Snowflake_get_station_id_result&);
  Snowflake_get_station_id_result() : success(0) {
  }

  virtual ~Snowflake_get_station_id_result() throw();
  int64_t success;

  _Snowflake_get_station_id_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Snowflake_get_station_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Snowflake_get_station_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_station_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_station_id_presult__isset {
  _Snowflake_get_station_id_presult__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_station_id_presult__isset;

class Snowflake_get_station_id_presult {
 public:


  virtual ~Snowflake_get_station_id_presult() throw();
  int64_t* success;

  _Snowflake_get_station_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Snowflake_get_process_id_args {
 public:

  Snowflake_get_process_id_args(const Snowflake_get_process_id_args&);
  Snowflake_get_process_id_args& operator=(const Snowflake_get_process_id_args&);
  Snowflake_get_process_id_args() {
  }

  virtual ~Snowflake_get_process_id_args() throw();

  bool operator == (const Snowflake_get_process_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Snowflake_get_process_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_process_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Snowflake_get_process_id_pargs {
 public:


  virtual ~Snowflake_get_process_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_process_id_result__isset {
  _Snowflake_get_process_id_result__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_process_id_result__isset;

class Snowflake_get_process_id_result {
 public:

  Snowflake_get_process_id_result(const Snowflake_get_process_id_result&);
  Snowflake_get_process_id_result& operator=(const Snowflake_get_process_id_result&);
  Snowflake_get_process_id_result() : success(0) {
  }

  virtual ~Snowflake_get_process_id_result() throw();
  int64_t success;

  _Snowflake_get_process_id_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Snowflake_get_process_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Snowflake_get_process_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_process_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_process_id_presult__isset {
  _Snowflake_get_process_id_presult__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_process_id_presult__isset;

class Snowflake_get_process_id_presult {
 public:


  virtual ~Snowflake_get_process_id_presult() throw();
  int64_t* success;

  _Snowflake_get_process_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Snowflake_get_timestamp_args {
 public:

  Snowflake_get_timestamp_args(const Snowflake_get_timestamp_args&);
  Snowflake_get_timestamp_args& operator=(const Snowflake_get_timestamp_args&);
  Snowflake_get_timestamp_args() {
  }

  virtual ~Snowflake_get_timestamp_args() throw();

  bool operator == (const Snowflake_get_timestamp_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Snowflake_get_timestamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_timestamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Snowflake_get_timestamp_pargs {
 public:


  virtual ~Snowflake_get_timestamp_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_timestamp_result__isset {
  _Snowflake_get_timestamp_result__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_timestamp_result__isset;

class Snowflake_get_timestamp_result {
 public:

  Snowflake_get_timestamp_result(const Snowflake_get_timestamp_result&);
  Snowflake_get_timestamp_result& operator=(const Snowflake_get_timestamp_result&);
  Snowflake_get_timestamp_result() : success(0) {
  }

  virtual ~Snowflake_get_timestamp_result() throw();
  int64_t success;

  _Snowflake_get_timestamp_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Snowflake_get_timestamp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Snowflake_get_timestamp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_timestamp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_timestamp_presult__isset {
  _Snowflake_get_timestamp_presult__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_timestamp_presult__isset;

class Snowflake_get_timestamp_presult {
 public:


  virtual ~Snowflake_get_timestamp_presult() throw();
  int64_t* success;

  _Snowflake_get_timestamp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Snowflake_get_id_args__isset {
  _Snowflake_get_id_args__isset() : useragent(false) {}
  bool useragent :1;
} _Snowflake_get_id_args__isset;

class Snowflake_get_id_args {
 public:

  Snowflake_get_id_args(const Snowflake_get_id_args&);
  Snowflake_get_id_args& operator=(const Snowflake_get_id_args&);
  Snowflake_get_id_args() : useragent() {
  }

  virtual ~Snowflake_get_id_args() throw();
  std::string useragent;

  _Snowflake_get_id_args__isset __isset;

  void __set_useragent(const std::string& val);

  bool operator == (const Snowflake_get_id_args & rhs) const
  {
    if (!(useragent == rhs.useragent))
      return false;
    return true;
  }
  bool operator != (const Snowflake_get_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Snowflake_get_id_pargs {
 public:


  virtual ~Snowflake_get_id_pargs() throw();
  const std::string* useragent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_id_result__isset {
  _Snowflake_get_id_result__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_id_result__isset;

class Snowflake_get_id_result {
 public:

  Snowflake_get_id_result(const Snowflake_get_id_result&);
  Snowflake_get_id_result& operator=(const Snowflake_get_id_result&);
  Snowflake_get_id_result() : success(0) {
  }

  virtual ~Snowflake_get_id_result() throw();
  int64_t success;

  _Snowflake_get_id_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Snowflake_get_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Snowflake_get_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Snowflake_get_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Snowflake_get_id_presult__isset {
  _Snowflake_get_id_presult__isset() : success(false) {}
  bool success :1;
} _Snowflake_get_id_presult__isset;

class Snowflake_get_id_presult {
 public:


  virtual ~Snowflake_get_id_presult() throw();
  int64_t* success;

  _Snowflake_get_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SnowflakeClient : virtual public SnowflakeIf {
 public:
  SnowflakeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SnowflakeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t get_station_id();
  void send_get_station_id();
  int64_t recv_get_station_id();
  int64_t get_process_id();
  void send_get_process_id();
  int64_t recv_get_process_id();
  int64_t get_timestamp();
  void send_get_timestamp();
  int64_t recv_get_timestamp();
  int64_t get_id(const std::string& useragent);
  void send_get_id(const std::string& useragent);
  int64_t recv_get_id();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SnowflakeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SnowflakeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SnowflakeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_station_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_process_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_timestamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SnowflakeProcessor(boost::shared_ptr<SnowflakeIf> iface) :
    iface_(iface) {
    processMap_["get_station_id"] = &SnowflakeProcessor::process_get_station_id;
    processMap_["get_process_id"] = &SnowflakeProcessor::process_get_process_id;
    processMap_["get_timestamp"] = &SnowflakeProcessor::process_get_timestamp;
    processMap_["get_id"] = &SnowflakeProcessor::process_get_id;
  }

  virtual ~SnowflakeProcessor() {}
};

class SnowflakeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SnowflakeProcessorFactory(const ::boost::shared_ptr< SnowflakeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SnowflakeIfFactory > handlerFactory_;
};

class SnowflakeMultiface : virtual public SnowflakeIf {
 public:
  SnowflakeMultiface(std::vector<boost::shared_ptr<SnowflakeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SnowflakeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SnowflakeIf> > ifaces_;
  SnowflakeMultiface() {}
  void add(boost::shared_ptr<SnowflakeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t get_station_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_station_id();
    }
    return ifaces_[i]->get_station_id();
  }

  int64_t get_process_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_process_id();
    }
    return ifaces_[i]->get_process_id();
  }

  int64_t get_timestamp() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_timestamp();
    }
    return ifaces_[i]->get_timestamp();
  }

  int64_t get_id(const std::string& useragent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_id(useragent);
    }
    return ifaces_[i]->get_id(useragent);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SnowflakeConcurrentClient : virtual public SnowflakeIf {
 public:
  SnowflakeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SnowflakeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t get_station_id();
  int32_t send_get_station_id();
  int64_t recv_get_station_id(const int32_t seqid);
  int64_t get_process_id();
  int32_t send_get_process_id();
  int64_t recv_get_process_id(const int32_t seqid);
  int64_t get_timestamp();
  int32_t send_get_timestamp();
  int64_t recv_get_timestamp(const int32_t seqid);
  int64_t get_id(const std::string& useragent);
  int32_t send_get_id(const std::string& useragent);
  int64_t recv_get_id(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
